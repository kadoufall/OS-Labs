// implement fork from user space

#include <inc/string.h>
#include <inc/lib.h>

// PTE_COW marks copy-on-write page table entries.
// It is one of the bits explicitly allocated to user processes (PTE_AVAIL).
#define PTE_COW		0x800

//
// Custom page fault handler - if faulting page is copy-on-write,
// map in our own private writable copy.
//
static void
pgfault(struct UTrapframe *utf)
{
	void *addr = (void *) utf->utf_fault_va;
	uint32_t err = utf->utf_err;
	int r;

	// Check that the faulting access was (1) a write, and (2) to a
	// copy-on-write page.  If not, panic.
	// Hint:
	//   Use the read-only page table mappings at vpt
	//   (see <inc/memlayout.h>).

	// LAB 4: Your code here.
	if((err & FEC_WR) == 0 || (vpt[PGNUM((uint32_t)addr)] & PTE_COW) == 0){
		panic("pgfault check the faulting access error");
	}

	// Allocate a new page, map it at a temporary location (PFTEMP),
	// copy the data from the old page to the new page, then move the new
	// page to the old page's address.
	// Hint:
	//   You should make three system calls.
	//   No need to explicitly delete the old page's mapping.

	// LAB 4: Your code here.

	// panic("pgfault not implemented");
	envid_t envid = sys_getenvid();
	r = sys_page_alloc(envid, (void *) PFTEMP, PTE_P | PTE_W | PTE_U);
	if(r < 0){
		panic("pgfault sys_page_alloc error");
	}
	
	void *temAddr = (void *)ROUNDDOWN((uint32_t)addr, PGSIZE);
	memmove((void *)PFTEMP, temAddr, PGSIZE);
	
	r = sys_page_map(envid, (void *)PFTEMP, envid, temAddr, PTE_P | PTE_W | PTE_U);
	if(r < 0){
		panic("pgfault sys_page_map error");
	}
	
	r = sys_page_unmap(envid, PFTEMP);
	if(r < 0){
		panic("pgfault sys_page_unmap error");
	}
}

//
// Map our virtual page pn (address pn*PGSIZE) into the target envid
// at the same virtual address.  If the page is writable or copy-on-write,
// the new mapping must be created copy-on-write, and then our mapping must be
// marked copy-on-write as well.  (Exercise: Why do we need to mark ours
// copy-on-write again if it was already copy-on-write at the beginning of
// this function?)
//
// Returns: 0 on success, < 0 on error.
// It is also OK to panic on error.
//
static int
duppage(envid_t envid, unsigned pn)
{
	int r;

	// LAB 4: Your code here.
	//panic("duppage not implemented");
	void *addr = (void*)(pn*PGSIZE);
	envid_t curEnvid = sys_getenvid();
	
	if (!(vpt[pn] & PTE_P)){
		return -E_INVAL;
	}
	
	if(!((vpt[pn] & PTE_W) || (vpt[pn] & PTE_COW))){
		r = sys_page_map(curEnvid, addr, envid, addr, PGOFF(vpt[pn]));
		if(r < 0){
			panic("duppage sys_page_map: error");
		}
	
	}
	
	// change current env perm
	r = sys_page_map(curEnvid,addr, envid, addr, PTE_P | PTE_U | PTE_COW);
	if(r < 0){
		panic("duppage sys_page_map: error");
	}
	
	// change parent perm	
	r = sys_page_map(curEnvid, addr, curEnvid, addr, PTE_P | PTE_U | PTE_COW);
	if(r < 0){
		panic("duppage sys_page_map: error");	
	}
	
	return 0;
}

//
// User-level fork with copy-on-write.
// Set up our page fault handler appropriately.
// Create a child.
// Copy our address space and page fault handler setup to the child.
// Then mark the child as runnable and return.
//
// Returns: child's envid to the parent, 0 to the child, < 0 on error.
// It is also OK to panic on error.
//
// Hint:
//   Use vpd, vpt, and duppage.
//   Remember to fix "thisenv" in the child process.
//   Neither user exception stack should ever be marked copy-on-write,
//   so you must allocate a new page for the child's user exception stack.
//
envid_t
fork(void)
{
	// LAB 4: Your code here.
	//panic("fork not implemented");
	set_pgfault_handler(pgfault);
	
	envid_t envid = sys_exofork();
	if(envid < 0){
		panic("fork sys_exofork: error ");
	}
	
	// child
	if(envid == 0){
		thisenv = &envs[ENVX(sys_getenvid())];
		return 0;
	}
	
	// 拷贝映射
	int i;
	int num;
	for(i = PDX(UTEXT); i < PDX(UXSTACKTOP); i++){
		if(vpd[i] & PTE_P){
			int j;
			for(j = 0; j < NPTENTRIES; j++){
				num = PGNUM(PGADDR(i, j, 0));
				if(num != PGNUM(UXSTACKTOP - PGSIZE) && (vpt[num] & PTE_P)){
					duppage(envid, num);
				}
			}
		}
	}
	
	// 用户错误栈
	int re;
	if((re = sys_page_alloc(envid, (void*)(UXSTACKTOP-PGSIZE), PTE_P | PTE_U | PTE_W)) < 0){
		panic("fork sys_env_set_pgfault_upcall: error ");
	}
	
	
	if((re = sys_env_set_pgfault_upcall(envid, thisenv->env_pgfault_upcall)) < 0){
		panic("fork sys_env_set_pgfault_upcall: error ");
	}
	
	if((re = sys_env_set_status(envid, ENV_RUNNABLE)) < 0){
		panic("fork sys_env_set_status: error ");
	}
	
	return envid;
}


envid_t
fork_priority(int priority)
{
	// LAB 4: Your code here.
	//panic("fork not implemented");
	set_pgfault_handler(pgfault);
	
	envid_t envid = sys_exofork();
	if(envid < 0){
		panic("fork sys_exofork: error ");
	}
	
	// child
	if(envid == 0){
		thisenv = &envs[ENVX(sys_getenvid())];
		sys_env_change_priority(thisenv->env_id, priority);
		return 0;
	}
	
	// 拷贝映射
	int i;
	int num;
	for(i = PDX(UTEXT); i < PDX(UXSTACKTOP); i++){
		if(vpd[i] & PTE_P){
			int j;
			for(j = 0; j < NPTENTRIES; j++){
				num = PGNUM(PGADDR(i, j, 0));
				if(num != PGNUM(UXSTACKTOP - PGSIZE) && (vpt[num] & PTE_P)){
					duppage(envid, num);
				}
			}
		}
	}
	
	// 用户错误栈
	int re;
	if((re = sys_page_alloc(envid, (void*)(UXSTACKTOP-PGSIZE), PTE_P | PTE_U | PTE_W)) < 0){
		panic("fork sys_env_set_pgfault_upcall: error ");
	}
	
	
	if((re = sys_env_set_pgfault_upcall(envid, thisenv->env_pgfault_upcall)) < 0){
		panic("fork sys_env_set_pgfault_upcall: error ");
	}
	
	if((re = sys_env_set_status(envid, ENV_RUNNABLE)) < 0){
		panic("fork sys_env_set_status: error ");
	}
	
	return envid;
}

// Challenge!
int
sfork(void)
{
	panic("sfork not implemented");
	return -E_INVAL;
}
